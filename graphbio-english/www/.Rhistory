body = dashboardBody(
box()
),
title = "Preloader"
),
server = function(input, output, session) {
# fake reload
#observe({
Sys.sleep(3)
#})
}
)
runApp('C:/Users/41378/Desktop/testapp')
library(shiny)
library(bs4Dash)
library(waiter)
shinyApp(
ui = dashboardPage(
preloader = list(html = tagList(spin_1(), "Loading ..."), color = "#3c8dbc"),
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = dashboardBody(
box()
),
title = "Preloader"
),
server = function(input, output, session) {
# fake reload
#observe({
Sys.sleep(3)
#})
}
)
library(shiny)
library(bs4Dash)
library(waiter)
shinyApp(
ui = dashboardPage(
preloader = list(html = tagList(spin_1(), "Loading ..."), color = "#3c8dbc"),
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = dashboardBody(
box()
),
title = "Preloader"
),
server = function(input, output, session) {
# fake reload
observe({
Sys.sleep(3)
})
}
)
library(shiny)
library(bs4Dash)
library(waiter)
shinyApp(
ui = dashboardPage(
preloader = list(html = tagList(spin_1(), "Loading ..."), color = "#3c8dbc"),
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = dashboardBody(
box()
),
title = "Preloader"
),
server = function(input, output, session) {
# fake reload
#observe({
Sys.sleep(1)
#})
}
)
library(shiny)
library(bs4Dash)
library(waiter)
shinyApp(
ui = dashboardPage(
preloader = list(html = tagList(spin_1(), "Loading ..."), color = "#3c8dbc"),
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = dashboardBody(
box()
),
title = "Preloader"
),
server = function(input, output, session) {
# fake reload
observe({
Sys.sleep(1)
})
}
)
library(shiny)
library(bs4Dash)
library(waiter)
shinyApp(
ui = dashboardPage(
preloader = list(html = tagList(spin_1(), "Loading ..."), color = "#3c8dbc"),
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = dashboardBody(
box()
),
title = "Preloader"
),
server = function(input, output, session) {
# fake reload
observe({
print(1)
})
}
)
runApp('C:/Users/41378/Desktop/testapp')
runApp('C:/Users/41378/Desktop/testapp')
runApp('C:/Users/41378/Desktop/testapp')
library(shiny)
library(waiter)
ui <- fluidPage(
use_waiter(),
waiter_show_on_load(html = spin_fading_circles()),
h3("Content you will only see after loading screen has disappeared")
)
server <- function(input, output, session){
Sys.sleep(3) # do something that takes time
waiter_hide()
}
shinyApp(ui, server)
library(shiny)
library(waiter)
ui <- fluidPage(
use_waiter(),
waiter_show_on_load(list(html = tagList(spin_1(), "Loading ..."))),
h3("Content you will only see after loading screen has disappeared")
)
server <- function(input, output, session){
Sys.sleep(3) # do something that takes time
waiter_hide()
}
shinyApp(ui, server)
library(shiny)
library(waiter)
ui <- fluidPage(
use_waiter(),
waiter_show_on_load(html = tagList(spin_1(), "Loading ...")),
h3("Content you will only see after loading screen has disappeared")
)
server <- function(input, output, session){
Sys.sleep(3) # do something that takes time
waiter_hide()
}
shinyApp(ui, server)
runApp('C:/Users/41378/Desktop/testapp')
runApp('C:/Users/41378/Desktop/testapp')
library(shiny)
library(waiter)
ui <- fluidPage(
use_waiter(),
waiter_preloader(),
uiOutput("hello")
)
server <- function(input, output, session){
Sys.sleep(3)
output$hello <- renderUI({
h1("World")
})
}
shinyApp(ui, server)
library(shiny)
library(waiter)
ui <- fluidPage(
use_waiter(),
waiter_preloader(),
uiOutput("hello")
)
server <- function(input, output, session){
Sys.sleep(3)
output$hello <- renderUI({
h1("World")
})
}
shinyApp(ui, server)
library(shiny)
library(waiter)
ui <- fluidPage(
use_waiter(),
waiter_preloader(),
uiOutput("hello")
)
server <- function(input, output, session){
output$hello <- renderUI({
h1("World")
})
}
shinyApp(ui, server)
294+32391+336
system("python")
library(r2d3)
shiny::runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
library(devtools)
help("install_github")
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
runApp('C:/Users/41378/Desktop/shinyApps/GraphBio/graphbio')
help("pheatmap")
library(pheatmap)
help("pheatmap")
help("pheatmap")
help("pheatmap")
library(pheatmap)
help("pheatmap")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("alevinQC")
chooseCRANmirror()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("alevinQC")
chooseBioCmirror()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("alevinQC")
library(alevinQC)
baseDir <- system.file("extdata/alevin_example_v0.14", package = "alevinQC")
checkAlevinInputFiles(baseDir = baseDir)
baseDir <- "C:/Users/41378/Desktop/alevin_output/"
checkAlevinInputFiles(baseDir = baseDir)
outputDir <- tempdir()
alevinQCReport(baseDir = baseDir, sampleId = "testSample",
outputFile = "alevinReport.html",
outputFormat = "html_document",
outputDir = outputDir, forceOverwrite = TRUE)
outputDir
baseDir <- "C:/Users/41378/Desktop/pbmc4k_10x/alevin_output/"
checkAlevinInputFiles(baseDir = baseDir)
outputDir <- tempdir()
alevinQCReport(baseDir = baseDir, sampleId = "testSample",
outputFile = "alevinReport.html",
outputFormat = "html_document",
outputDir = outputDir, forceOverwrite = TRUE)
outputDir="C:/Users/41378/Desktop/pbmc4k_10x/alevinQC/"
alevinQCReport(baseDir = baseDir, sampleId = "testSample",
outputFile = "alevinReport.html",
outputFormat = "html_document",
outputDir = outputDir, forceOverwrite = TRUE)
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
mtcars
mtcars$mpg/colSums(mtcars)
colSums(mtcars)
colSums(mtcars)[1]
mtcars[,1]=mtcars[,1]/2
mtcars
3/2*3
3*3/2
help("write.table")
help("write.table")
library(ggpubr)
help("ggscatter")
mtcars
ggscatter(mtcars,x=names(mtcars)[1],y=names(mtcars)[2])
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
ggscatter(mtcars,x=names(mtcars)[1],y=names(mtcars)[2])
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp()
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp()
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp()
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
library(RColorBrewer)
set1
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
d=read.table("H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio/www/pie_example.csv",header=T,sep=",")
head(d)
d=read.table("H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio/www/pie_example.csv",header=TRUE,sep=",")
head(d)
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
class(d[,1])
help(melt)
ks.test(mtcars[,1],mtcars[,2])
ks.test(mtcars[,1],mtcars[,2])$pvalue
ks.test(mtcars[,1],mtcars[,2])$pval
ks.test(mtcars[,1],mtcars[,2])$p
ggplot()
cor.test(mtcars[,1],mtcars[,2])
cor.test(mtcars[,1],mtcars[,3])
ks.test(mtcars[,1],mtcars[,3])
ks.test(mtcars[,1],mtcars[,4])
ks.test(mtcars[,1],mtcars[,5])
ks.test(mtcars[,1],mtcars[,6])
x=1:3
y=1:3
cor.test(x,y)
cor.test(x,y)$p
ks.test(mtcars[,1],mtcars[,6])$p
cor.test(x,y)$p.value
ks.test(mtcars[,1],mtcars[,6])$p.value
cor.test(x,y)
cor.test(x,y)$p.value
d=read.table("H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio/www/venn_example.csv",header=TRUE,sep=",",fill=TRUE)
head(d)
d[is.na(d)]=""
d
length(d$group1)
d
length(d$group1)
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
x=1:3
y=1:4
ks.test(x,y)
paste0("Kolmogorov−Smirnov test: p−value=", ks.test(x,y)$p.value)
text=paste0("Kolmogorov−Smirnov test: p−value=", ks.test(x,y)$p.value)
text
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
help("ggroc")
rocobj <- roc(aSAH$outcome, aSAH$s100b)
ggroc(rocobj)
ggroc(smooth(rocobj))
ggroc(smooth(rocobj))+theme_bw()
ggroc(rocobj, aes="linetype", color="red")
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp()
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
help(aSAH)
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
plot(1:10)
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp()
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp()
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
help(plot)
plot(rocobj)
plot(1:10)
plot(1:10,width=8)
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
write.table(aSAH[,c("outcome","s100b")],"roc_example.csv",sep=",",row.names=FALSE,quote=FALSE)
getwd()
write.table(lung[,c(5,3,2)],"surv_example.csv",sep=",",row.names=FALSE,quote=FALSE)
head(lung)
write.table(lung[,c(5,2,3)],"surv_example.csv",sep=",",row.names=FALSE,quote=FALSE)
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
help(pdf)
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
d=aSAH[,c("outcome","s100b")]
rocobj=roc(d[,1], d[,2],ci=TRUE)
x=as.character(rocobj$ci)
textlabel=paste0("AUC: ",round(as.numeric(x[2]),3),"(",round(as.numeric(x[1]),3),"-",round(as.numeric(x[3]),3),")")
pdf("1.pdf")
plot(smooth(rocobj), col="red")
text(0.28, 0.5, labels=textlabel)
dev.off()
pdf("1.pdf")
plot(smooth(rocobj), col="red")
dev.off()
plot(smooth(rocobj), col="red")
pdf(file="1.pdf")
plot(smooth(rocobj), col="red")
dev.off()
pdf(file="1.pdf")
print(plot(smooth(rocobj), col="red"))
dev.off()
pdf(file="1.pdf")
plot(1:10)
dev.off()
pdf("1.pdf")
plot(1:10)
dev.off()
pdf("1.pdf")
print(plot(1:10))
dev.off()
d=aSAH[,c("outcome","s100b")]
rocobj=roc(d[,1], d[,2],ci=TRUE)
x=as.character(rocobj$ci)
textlabel=paste0("AUC: ",round(as.numeric(x[2]),3),"(",round(as.numeric(x[1]),3),"-",round(as.numeric(x[3]),3),")")
library(pROC)
d=aSAH[,c("outcome","s100b")]
rocobj=roc(d[,1], d[,2],ci=TRUE)
x=as.character(rocobj$ci)
textlabel=paste0("AUC: ",round(as.numeric(x[2]),3),"(",round(as.numeric(x[1]),3),"-",round(as.numeric(x[3]),3),")")
pdf("1.pdf")
plot(smooth(rocobj), col="red")
text(0.28, 0.5, labels=textlabel)
dev.off()
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp()
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp()
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
gsub(" ","_","aa b")
FeaturePlot
library(Seurat)
FeaturePlot
library(DESeq2)
help(fpkm)
a=1.1
sub(".1","",a)
a="1/1"
strsplit("/",a)
strsplit(a,"/")
strsplit(a,"/")[[1]][2]
strsplit(a,"/")[[1]][1]
strsplit(a,"/")[[1]][0]
24*60
2^0.2
for(i in 1:10){i}
for(i in 1:10){print(i)}
help(ks.test)
help(ks.test)
help("ks.test")
a=NULL
append(a,1)
a=append(a,1)
a=append(a,1)
a=append(a,1)
a
class(a)
a[1]
log2(a)
library(ggplot2)
library(RColorBrewer)
shiny::runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
setwd("H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio/www")
d=read.table("cdc-mutiple-group.csv",header=T,sep=",",fill=TRUE)
is.na(d)
d[!is.na(d),1]
d[!is.na(d[,1]),1]
ncol(d)
ab=NULL
ab1=NULL
for(i in 1:ncol(d)){
x1=d[!is.na(d[,i]),i]
ab=append(ab,x1)
ab1=append(ab1,length(x1))
}
d=data.frame(value=log2(ab+0.0001),group=rep(names(d),ab1))
dim(d)
ggplot(d, aes(value, colour = group)) + stat_ecdf(geom="line",size=1)+theme_pubr(border=TRUE)+ylab("Cumulative fraction")+xlab('Value')+scale_color_brewer(palette="Set3")+
annotate(geom = 'text', label = text, x = Inf, y = -Inf, hjust = 1.2, vjust = -0.7)
head(d)
ggplot(d, aes(value, colour = factor(group))) + stat_ecdf(geom="line",size=1)+theme_pubr(border=TRUE)+ylab("Cumulative fraction")+xlab('Value')+scale_color_brewer(palette="Set3")+
annotate(geom = 'text', label = text, x = Inf, y = -Inf, hjust = 1.2, vjust = -0.7)
ggplot(d, aes(value, colour = factor(group))) + stat_ecdf(geom="line",size=1)+theme_pubr(border=TRUE)+ylab("Cumulative fraction")+xlab('Value')+scale_color_brewer(palette="Set3")
ggplot(d, aes(value, colour = factor(group))) + stat_ecdf(geom="line",size=1)+theme_pubr(border=TRUE)+ylab("Cumulative fraction")+xlab('Value')
ggplot(d, aes(value, colour = factor(group))) + stat_ecdf(geom="line",size=1)+theme_pubr(border=TRUE)+ylab("Cumulative fraction")+xlab('Value')+scale_color_brewer(palette="Set2")
ggplot(d, aes(value, colour = factor(group))) + stat_ecdf(geom="line",size=1)+theme_pubr(border=TRUE)+ylab("Cumulative fraction")+xlab('Value')+scale_color_brewer(palette="Set1")
runApp('H:/数智生物-主要办事/华为云/生信工具/shinyApps/GraphBio/graphbio')
ggplot(d, aes(value, colour = factor(group))) + stat_ecdf(geom="line",size=1)+theme_pubr(border=TRUE)+ylab("Cumulative fraction")+xlab('Value')+scale_color_brewer(palette="Set3")
ggplot(d, aes(value, colour = factor(group))) + stat_ecdf(geom="line",size=1)+theme_pubr(border=TRUE)+ylab("Cumulative fraction")+xlab('Value')+scale_color_brewer(palette="Set3")
library(DESeq2)
help(fpm)
help(fpkm)
help(fpm)
help(fpkm)
help(fpm)
log10(0.05)
